package com.translation.bean;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InviteExample {

	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table invite
	 * @ibatorgenerated  Mon Aug 24 18:07:53 CST 2015
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table invite
	 * @ibatorgenerated  Mon Aug 24 18:07:53 CST 2015
	 */
	protected List oredCriteria;

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table invite
	 * @ibatorgenerated  Mon Aug 24 18:07:53 CST 2015
	 */
	public InviteExample() {
		oredCriteria = new ArrayList();
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table invite
	 * @ibatorgenerated  Mon Aug 24 18:07:53 CST 2015
	 */
	protected InviteExample(InviteExample example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table invite
	 * @ibatorgenerated  Mon Aug 24 18:07:53 CST 2015
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table invite
	 * @ibatorgenerated  Mon Aug 24 18:07:53 CST 2015
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table invite
	 * @ibatorgenerated  Mon Aug 24 18:07:53 CST 2015
	 */
	public List getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table invite
	 * @ibatorgenerated  Mon Aug 24 18:07:53 CST 2015
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table invite
	 * @ibatorgenerated  Mon Aug 24 18:07:53 CST 2015
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table invite
	 * @ibatorgenerated  Mon Aug 24 18:07:53 CST 2015
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table invite
	 * @ibatorgenerated  Mon Aug 24 18:07:53 CST 2015
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Apache iBATIS ibator. This class corresponds to the database table invite
	 * @ibatorgenerated  Mon Aug 24 18:07:53 CST 2015
	 */
	public static class Criteria {
		protected List criteriaWithoutValue;
		protected List criteriaWithSingleValue;
		protected List criteriaWithListValue;
		protected List criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList();
			criteriaWithSingleValue = new ArrayList();
			criteriaWithListValue = new ArrayList();
			criteriaWithBetweenValue = new ArrayList();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition, List values,
				String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List list = new ArrayList();
			list.add(value1);
			list.add(value2);
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		public Criteria andInviteidIsNull() {
			addCriterion("inviteid is null");
			return this;
		}

		public Criteria andInviteidIsNotNull() {
			addCriterion("inviteid is not null");
			return this;
		}

		public Criteria andInviteidEqualTo(Integer value) {
			addCriterion("inviteid =", value, "inviteid");
			return this;
		}

		public Criteria andInviteidNotEqualTo(Integer value) {
			addCriterion("inviteid <>", value, "inviteid");
			return this;
		}

		public Criteria andInviteidGreaterThan(Integer value) {
			addCriterion("inviteid >", value, "inviteid");
			return this;
		}

		public Criteria andInviteidGreaterThanOrEqualTo(Integer value) {
			addCriterion("inviteid >=", value, "inviteid");
			return this;
		}

		public Criteria andInviteidLessThan(Integer value) {
			addCriterion("inviteid <", value, "inviteid");
			return this;
		}

		public Criteria andInviteidLessThanOrEqualTo(Integer value) {
			addCriterion("inviteid <=", value, "inviteid");
			return this;
		}

		public Criteria andInviteidIn(List values) {
			addCriterion("inviteid in", values, "inviteid");
			return this;
		}

		public Criteria andInviteidNotIn(List values) {
			addCriterion("inviteid not in", values, "inviteid");
			return this;
		}

		public Criteria andInviteidBetween(Integer value1, Integer value2) {
			addCriterion("inviteid between", value1, value2, "inviteid");
			return this;
		}

		public Criteria andInviteidNotBetween(Integer value1, Integer value2) {
			addCriterion("inviteid not between", value1, value2, "inviteid");
			return this;
		}

		public Criteria andDocidIsNull() {
			addCriterion("docid is null");
			return this;
		}

		public Criteria andDocidIsNotNull() {
			addCriterion("docid is not null");
			return this;
		}

		public Criteria andDocidEqualTo(Integer value) {
			addCriterion("docid =", value, "docid");
			return this;
		}

		public Criteria andDocidNotEqualTo(Integer value) {
			addCriterion("docid <>", value, "docid");
			return this;
		}

		public Criteria andDocidGreaterThan(Integer value) {
			addCriterion("docid >", value, "docid");
			return this;
		}

		public Criteria andDocidGreaterThanOrEqualTo(Integer value) {
			addCriterion("docid >=", value, "docid");
			return this;
		}

		public Criteria andDocidLessThan(Integer value) {
			addCriterion("docid <", value, "docid");
			return this;
		}

		public Criteria andDocidLessThanOrEqualTo(Integer value) {
			addCriterion("docid <=", value, "docid");
			return this;
		}

		public Criteria andDocidIn(List values) {
			addCriterion("docid in", values, "docid");
			return this;
		}

		public Criteria andDocidNotIn(List values) {
			addCriterion("docid not in", values, "docid");
			return this;
		}

		public Criteria andDocidBetween(Integer value1, Integer value2) {
			addCriterion("docid between", value1, value2, "docid");
			return this;
		}

		public Criteria andDocidNotBetween(Integer value1, Integer value2) {
			addCriterion("docid not between", value1, value2, "docid");
			return this;
		}

		public Criteria andGuestidIsNull() {
			addCriterion("guestid is null");
			return this;
		}

		public Criteria andGuestidIsNotNull() {
			addCriterion("guestid is not null");
			return this;
		}

		public Criteria andGuestidEqualTo(Integer value) {
			addCriterion("guestid =", value, "guestid");
			return this;
		}

		public Criteria andGuestidNotEqualTo(Integer value) {
			addCriterion("guestid <>", value, "guestid");
			return this;
		}

		public Criteria andGuestidGreaterThan(Integer value) {
			addCriterion("guestid >", value, "guestid");
			return this;
		}

		public Criteria andGuestidGreaterThanOrEqualTo(Integer value) {
			addCriterion("guestid >=", value, "guestid");
			return this;
		}

		public Criteria andGuestidLessThan(Integer value) {
			addCriterion("guestid <", value, "guestid");
			return this;
		}

		public Criteria andGuestidLessThanOrEqualTo(Integer value) {
			addCriterion("guestid <=", value, "guestid");
			return this;
		}

		public Criteria andGuestidIn(List values) {
			addCriterion("guestid in", values, "guestid");
			return this;
		}

		public Criteria andGuestidNotIn(List values) {
			addCriterion("guestid not in", values, "guestid");
			return this;
		}

		public Criteria andGuestidBetween(Integer value1, Integer value2) {
			addCriterion("guestid between", value1, value2, "guestid");
			return this;
		}

		public Criteria andGuestidNotBetween(Integer value1, Integer value2) {
			addCriterion("guestid not between", value1, value2, "guestid");
			return this;
		}

		public Criteria andIsnewIsNull() {
			addCriterion("isnew is null");
			return this;
		}

		public Criteria andIsnewIsNotNull() {
			addCriterion("isnew is not null");
			return this;
		}

		public Criteria andIsnewEqualTo(String value) {
			addCriterion("isnew =", value, "isnew");
			return this;
		}

		public Criteria andIsnewNotEqualTo(String value) {
			addCriterion("isnew <>", value, "isnew");
			return this;
		}

		public Criteria andIsnewGreaterThan(String value) {
			addCriterion("isnew >", value, "isnew");
			return this;
		}

		public Criteria andIsnewGreaterThanOrEqualTo(String value) {
			addCriterion("isnew >=", value, "isnew");
			return this;
		}

		public Criteria andIsnewLessThan(String value) {
			addCriterion("isnew <", value, "isnew");
			return this;
		}

		public Criteria andIsnewLessThanOrEqualTo(String value) {
			addCriterion("isnew <=", value, "isnew");
			return this;
		}

		public Criteria andIsnewLike(String value) {
			addCriterion("isnew like", value, "isnew");
			return this;
		}

		public Criteria andIsnewNotLike(String value) {
			addCriterion("isnew not like", value, "isnew");
			return this;
		}

		public Criteria andIsnewIn(List values) {
			addCriterion("isnew in", values, "isnew");
			return this;
		}

		public Criteria andIsnewNotIn(List values) {
			addCriterion("isnew not in", values, "isnew");
			return this;
		}

		public Criteria andIsnewBetween(String value1, String value2) {
			addCriterion("isnew between", value1, value2, "isnew");
			return this;
		}

		public Criteria andIsnewNotBetween(String value1, String value2) {
			addCriterion("isnew not between", value1, value2, "isnew");
			return this;
		}
	}
}