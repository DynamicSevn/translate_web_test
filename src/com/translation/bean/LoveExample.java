package com.translation.bean;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LoveExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table love
     *
     * @ibatorgenerated Thu Apr 16 22:47:44 CST 2015
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table love
     *
     * @ibatorgenerated Thu Apr 16 22:47:44 CST 2015
     */
    protected List oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table love
     *
     * @ibatorgenerated Thu Apr 16 22:47:44 CST 2015
     */
    public LoveExample() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table love
     *
     * @ibatorgenerated Thu Apr 16 22:47:44 CST 2015
     */
    protected LoveExample(LoveExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table love
     *
     * @ibatorgenerated Thu Apr 16 22:47:44 CST 2015
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table love
     *
     * @ibatorgenerated Thu Apr 16 22:47:44 CST 2015
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table love
     *
     * @ibatorgenerated Thu Apr 16 22:47:44 CST 2015
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table love
     *
     * @ibatorgenerated Thu Apr 16 22:47:44 CST 2015
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table love
     *
     * @ibatorgenerated Thu Apr 16 22:47:44 CST 2015
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table love
     *
     * @ibatorgenerated Thu Apr 16 22:47:44 CST 2015
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table love
     *
     * @ibatorgenerated Thu Apr 16 22:47:44 CST 2015
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table love
     *
     * @ibatorgenerated Thu Apr 16 22:47:44 CST 2015
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andLikeidIsNull() {
            addCriterion("likeid is null");
            return this;
        }

        public Criteria andLikeidIsNotNull() {
            addCriterion("likeid is not null");
            return this;
        }

        public Criteria andLikeidEqualTo(Integer value) {
            addCriterion("likeid =", value, "likeid");
            return this;
        }

        public Criteria andLikeidNotEqualTo(Integer value) {
            addCriterion("likeid <>", value, "likeid");
            return this;
        }

        public Criteria andLikeidGreaterThan(Integer value) {
            addCriterion("likeid >", value, "likeid");
            return this;
        }

        public Criteria andLikeidGreaterThanOrEqualTo(Integer value) {
            addCriterion("likeid >=", value, "likeid");
            return this;
        }

        public Criteria andLikeidLessThan(Integer value) {
            addCriterion("likeid <", value, "likeid");
            return this;
        }

        public Criteria andLikeidLessThanOrEqualTo(Integer value) {
            addCriterion("likeid <=", value, "likeid");
            return this;
        }

        public Criteria andLikeidIn(List values) {
            addCriterion("likeid in", values, "likeid");
            return this;
        }

        public Criteria andLikeidNotIn(List values) {
            addCriterion("likeid not in", values, "likeid");
            return this;
        }

        public Criteria andLikeidBetween(Integer value1, Integer value2) {
            addCriterion("likeid between", value1, value2, "likeid");
            return this;
        }

        public Criteria andLikeidNotBetween(Integer value1, Integer value2) {
            addCriterion("likeid not between", value1, value2, "likeid");
            return this;
        }

        public Criteria andUseridIsNull() {
            addCriterion("userid is null");
            return this;
        }

        public Criteria andUseridIsNotNull() {
            addCriterion("userid is not null");
            return this;
        }

        public Criteria andUseridEqualTo(Integer value) {
            addCriterion("userid =", value, "userid");
            return this;
        }

        public Criteria andUseridNotEqualTo(Integer value) {
            addCriterion("userid <>", value, "userid");
            return this;
        }

        public Criteria andUseridGreaterThan(Integer value) {
            addCriterion("userid >", value, "userid");
            return this;
        }

        public Criteria andUseridGreaterThanOrEqualTo(Integer value) {
            addCriterion("userid >=", value, "userid");
            return this;
        }

        public Criteria andUseridLessThan(Integer value) {
            addCriterion("userid <", value, "userid");
            return this;
        }

        public Criteria andUseridLessThanOrEqualTo(Integer value) {
            addCriterion("userid <=", value, "userid");
            return this;
        }

        public Criteria andUseridIn(List values) {
            addCriterion("userid in", values, "userid");
            return this;
        }

        public Criteria andUseridNotIn(List values) {
            addCriterion("userid not in", values, "userid");
            return this;
        }

        public Criteria andUseridBetween(Integer value1, Integer value2) {
            addCriterion("userid between", value1, value2, "userid");
            return this;
        }

        public Criteria andUseridNotBetween(Integer value1, Integer value2) {
            addCriterion("userid not between", value1, value2, "userid");
            return this;
        }

        public Criteria andCommidIsNull() {
            addCriterion("commid is null");
            return this;
        }

        public Criteria andCommidIsNotNull() {
            addCriterion("commid is not null");
            return this;
        }

        public Criteria andCommidEqualTo(Integer value) {
            addCriterion("commid =", value, "commid");
            return this;
        }

        public Criteria andCommidNotEqualTo(Integer value) {
            addCriterion("commid <>", value, "commid");
            return this;
        }

        public Criteria andCommidGreaterThan(Integer value) {
            addCriterion("commid >", value, "commid");
            return this;
        }

        public Criteria andCommidGreaterThanOrEqualTo(Integer value) {
            addCriterion("commid >=", value, "commid");
            return this;
        }

        public Criteria andCommidLessThan(Integer value) {
            addCriterion("commid <", value, "commid");
            return this;
        }

        public Criteria andCommidLessThanOrEqualTo(Integer value) {
            addCriterion("commid <=", value, "commid");
            return this;
        }

        public Criteria andCommidIn(List values) {
            addCriterion("commid in", values, "commid");
            return this;
        }

        public Criteria andCommidNotIn(List values) {
            addCriterion("commid not in", values, "commid");
            return this;
        }

        public Criteria andCommidBetween(Integer value1, Integer value2) {
            addCriterion("commid between", value1, value2, "commid");
            return this;
        }

        public Criteria andCommidNotBetween(Integer value1, Integer value2) {
            addCriterion("commid not between", value1, value2, "commid");
            return this;
        }

        public Criteria andIsnewIsNull() {
            addCriterion("isnew is null");
            return this;
        }

        public Criteria andIsnewIsNotNull() {
            addCriterion("isnew is not null");
            return this;
        }

        public Criteria andIsnewEqualTo(String value) {
            addCriterion("isnew =", value, "isnew");
            return this;
        }

        public Criteria andIsnewNotEqualTo(String value) {
            addCriterion("isnew <>", value, "isnew");
            return this;
        }

        public Criteria andIsnewGreaterThan(String value) {
            addCriterion("isnew >", value, "isnew");
            return this;
        }

        public Criteria andIsnewGreaterThanOrEqualTo(String value) {
            addCriterion("isnew >=", value, "isnew");
            return this;
        }

        public Criteria andIsnewLessThan(String value) {
            addCriterion("isnew <", value, "isnew");
            return this;
        }

        public Criteria andIsnewLessThanOrEqualTo(String value) {
            addCriterion("isnew <=", value, "isnew");
            return this;
        }

        public Criteria andIsnewLike(String value) {
            addCriterion("isnew like", value, "isnew");
            return this;
        }

        public Criteria andIsnewNotLike(String value) {
            addCriterion("isnew not like", value, "isnew");
            return this;
        }

        public Criteria andIsnewIn(List values) {
            addCriterion("isnew in", values, "isnew");
            return this;
        }

        public Criteria andIsnewNotIn(List values) {
            addCriterion("isnew not in", values, "isnew");
            return this;
        }

        public Criteria andIsnewBetween(String value1, String value2) {
            addCriterion("isnew between", value1, value2, "isnew");
            return this;
        }

        public Criteria andIsnewNotBetween(String value1, String value2) {
            addCriterion("isnew not between", value1, value2, "isnew");
            return this;
        }

        public Criteria andCreattimeIsNull() {
            addCriterion("creattime is null");
            return this;
        }

        public Criteria andCreattimeIsNotNull() {
            addCriterion("creattime is not null");
            return this;
        }

        public Criteria andCreattimeEqualTo(Date value) {
            addCriterion("creattime =", value, "creattime");
            return this;
        }

        public Criteria andCreattimeNotEqualTo(Date value) {
            addCriterion("creattime <>", value, "creattime");
            return this;
        }

        public Criteria andCreattimeGreaterThan(Date value) {
            addCriterion("creattime >", value, "creattime");
            return this;
        }

        public Criteria andCreattimeGreaterThanOrEqualTo(Date value) {
            addCriterion("creattime >=", value, "creattime");
            return this;
        }

        public Criteria andCreattimeLessThan(Date value) {
            addCriterion("creattime <", value, "creattime");
            return this;
        }

        public Criteria andCreattimeLessThanOrEqualTo(Date value) {
            addCriterion("creattime <=", value, "creattime");
            return this;
        }

        public Criteria andCreattimeIn(List values) {
            addCriterion("creattime in", values, "creattime");
            return this;
        }

        public Criteria andCreattimeNotIn(List values) {
            addCriterion("creattime not in", values, "creattime");
            return this;
        }

        public Criteria andCreattimeBetween(Date value1, Date value2) {
            addCriterion("creattime between", value1, value2, "creattime");
            return this;
        }

        public Criteria andCreattimeNotBetween(Date value1, Date value2) {
            addCriterion("creattime not between", value1, value2, "creattime");
            return this;
        }
    }
}